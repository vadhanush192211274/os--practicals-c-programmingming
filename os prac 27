#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

sem_t semaphore;

void* process(void* arg) {
    int process_id = *((int*)arg);

    printf("Process P%d is waiting for the semaphore.\n", process_id);
    sem_wait(&semaphore);
    printf("Process P%d has acquired the semaphore.\n", process_id);

    sleep(2);

    printf("Process P%d is releasing the semaphore.\n", process_id);
    sem_post(&semaphore);

    return NULL;
}

int main() {
    int num_instances = 4;
    int num_processes = 4;
    int process_ids[] = {1, 2, 3, 4};

    sem_init(&semaphore, 0, num_instances);

    pthread_t threads[num_processes];
    for (int i = 0; i < num_processes; i++) {
        pthread_create(&threads[i], NULL, process, &process_ids[i]);
    }

    for (int i = 0; i < num_processes; i++) {
        pthread_join(threads[i], NULL);
    }

    int additional_process_id = 5;

    printf("Process P%d is waiting for the semaphore.\n", additional_process_id);
    int result = sem_trywait(&semaphore);

    if (result == 0) {
        printf("Process P%d has acquired the semaphore.\n", additional_process_id);
        printf("Process P%d is releasing the semaphore.\n", additional_process_id);
        sem_post(&semaphore);
    } else {
        printf("Process P%d cannot acquire the semaphore at the moment.\n", additional_process_id);
    }

    sem_destroy(&semaphore);

    return 0;
}
