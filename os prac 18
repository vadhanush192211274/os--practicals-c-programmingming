#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 3
#define NUM_ITEMS_PRODUCED 4

int buffer[BUFFER_SIZE];
int buffer_index = 0;

sem_t mutex, full, empty;

void* producer(void* arg) {
    int item;

    for (int i = 0; i < NUM_ITEMS_PRODUCED; ++i) {
        item = rand() % 100;  // Generate a random item

        sem_wait(&empty);
        sem_wait(&mutex);

        buffer[buffer_index] = item;
        buffer_index = (buffer_index + 1) % BUFFER_SIZE;

        printf("Produced item: %d\n", item);

        sem_post(&mutex);
        sem_post(&full);
    }

    return NULL;
}

void* consumer(void* arg) {
    int item;

    // Consume an item in the beginning
    sem_wait(&full);
    sem_wait(&mutex);

    item = buffer[(buffer_index - 1 + BUFFER_SIZE) % BUFFER_SIZE];
    buffer_index = (buffer_index - 1 + BUFFER_SIZE) % BUFFER_SIZE;

    printf("Consumed item: %d\n", item);

    sem_post(&mutex);
    sem_post(&empty);

    return NULL;
}

int main() {
    srand(time(NULL));

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);

    // Create producer and consumer threads
    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Wait for the threads to finish
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);

    return 0;
}
